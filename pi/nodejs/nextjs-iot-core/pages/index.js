import Head from "next/head";
import styles from "../styles/Home.module.css";
import { io } from "socket.io-client";
import { useState, useEffect, forwardRef } from "react";
import Box from "@mui/material/Box";
import {
  DataGrid,
  GridColDef,
  GridValueGetterParams,
  GridToolbarContainer,
  GridToolbarExport,
  GridToolbar,
} from "@mui/x-data-grid";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import Stack from "@mui/material/Stack";
import Snackbar from "@mui/material/Snackbar";
import MuiAlert from "@mui/material/Alert";
import axios from "axios";

const columns = [
  {
    field: "SensorName",
    headerName: "Sensor Name",
    width: 150,
    editable: false,
  },
  {
    field: "Value",
    headerName: "Value",
    width: 150,
    type: "number",
    editable: false,
    valueGetter: (params) => `${params.row.Value || ""} C`,
  },
  {
    field: "createdAt",
    headerName: "Time",
    type: "date",
    width: 210,
    editable: false,
  },
];

function CustomToolbar() {
  return (
    <GridToolbarContainer>
      <GridToolbar />
    </GridToolbarContainer>
  );
}

const Alert = forwardRef(function Alert(props, ref) {
  return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});

export async function getServerSideProps() {
  let propsData = null;
  let propsErr = null;
  await axios
    .get(`http://${process.env.serverUrl}/getalert`, {})
    .then((response) => {
      propsData = response.data;
    })
    .catch((error) => {
      propsErr = error.message;
    });
  return { props: { propsData, propsErr } };
}
export default function Home({ propsData, propsErr }) {
  const [OpenSnakbar, setOpenSnakbar] = useState(false);
  const [SnackbarLevel, setSnackbarLevel] = useState("success");
  const [SnackbarMsg, setSnackbarMsg] = useState("MSG");
  const [tmp, setTmp] = useState("Fetching");
  const [gsocket, setSocket] = useState();
  const [tbldata, setTbldata] = useState([]);
  const [lowTMP, setlowTMP] = useState(propsData ? propsData.data.lowTMP : 0);
  const [highTMP, sethighTMP] = useState(
    propsData ? propsData.data.highTMP : 10
  );
  const [Rows, setRows] = useState(50);
  const [AlertMsg, setAlertMsg] = useState("Temperature data not found");
  const [AlertLevel, setAlertLevel] = useState("warning");
  useEffect(() => {
    if (propsErr) {
      handleSnackBar("error", "Fetched SetPoint Failed");
    } else {
      handleSnackBar("success", "Fetched SetPoint Success");
    }
    var socket = io(process.env.serverUrl, {
      secure: true,
      transports: ["websocket", "polling"],
      query: { device: "browser" },
    });
    setSocket(socket);
    socket.on("connect", () => {
      socket.emit("device", "browser");
      console.log(socket.id);
    });
    socket.on("connect_error", () => {
      setTimeout(() => socket.connect(), 5000);
    });
    socket.on("tmp", (tmpData) => {
      setTmp(tmpData + " C");
    });
    socket.on("alert", (alertData) => {
      checkTMP(
        alertData.data.tmp,
        alertData.data.highTMP,
        alertData.data.lowTMP
      );
    });

    socket.on("disconnect", () => setTmp("server disconnected"));
  }, []);
  function getRowData() {
    axios
      .get(`http://${process.env.serverUrl}/getdata`, {
        params: { row: Rows },
      })
      .then((response) => {
        setTbldata(response.data.data);
        handleSnackBar(
          "success",
          "Data Fetched " + response.data.data.length + " Rows Success"
        );
      })
      .catch((error) => {
        handleSnackBar("error", "Data Fetched Failed : " + error.message);
      });
  }
  function setAlerts() {
    axios
      .get(`http://${process.env.serverUrl}/setalert`, {
        params: { hightmp: highTMP, lowtmp: lowTMP },
      })
      .then((response) => {
        handleSnackBar("success", "Data Saved Success");
      })
      .catch((error) => {
        handleSnackBar("error", "Data Saved Failed : " + error.message);
      });
  }
  const handleSnackBar = (alertLevel, msg) => {
    setOpenSnakbar(true);
    setSnackbarLevel(alertLevel);
    setSnackbarMsg(msg);
  };

  const handleClose = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setOpenSnakbar(false);
  };
  function checkTMP(tmp,htmp, ltmp) {
    if (tmp > htmp) {
      setAlertMsg("Temperature more than " + htmp + " C");
      setAlertLevel("error");
    } else if (tmp < ltmp) {
      setAlertMsg("Temperature less than " + ltmp + " C");
      setAlertLevel("error");
    } else {
      setAlertMsg("Temperature is in range");
      setAlertLevel("success");
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>ESP 32 TMP</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Snackbar
        open={OpenSnakbar}
        autoHideDuration={6000}
        onClose={handleClose}
      >
        <Alert
          onClose={handleClose}
          severity={SnackbarLevel}
          sx={{ width: "100%" }}
        >
          {SnackbarMsg}
        </Alert>
      </Snackbar>

      <main className={styles.main}>
        <Alert severity={AlertLevel}>{AlertMsg}</Alert>
        <h1 className={styles.title}>IOT Server</h1>

        <p className={styles.description}>
          <code className={styles.code}>ESP32</code>
        </p>

        <div className={styles.grid}>
          <a className={styles.card}>
            <h2>Sensore &rarr;</h2>
            <p>{tmp}</p>
          </a>
        </div>
        <Stack spacing={2} direction="row">
          <TextField
            type="number"
            inputProps={{ inputMode: "numeric", pattern: "[0-9]*" }}
            id="outlined-basic"
            label="Low TMP"
            variant="outlined"
            defaultValue={lowTMP}
            onChange={(e) => {
              setlowTMP(e.target.value);
            }}
          />
          <TextField
            type="number"
            inputProps={{ inputMode: "numeric", pattern: "[0-9]*" }}
            id="outlined-basic"
            label="Hight TMP"
            variant="outlined"
            defaultValue={highTMP}
            onChange={(e) => {
              sethighTMP(e.target.value);
            }}
          />
          <Button
            variant="contained"
            onClick={() => {
              setAlerts();
            }}
          >
            Set Alert
          </Button>
        </Stack>
        <Stack
          sx={{
            margin: 5,
          }}
          spacing={2}
          direction="row"
        >
          <TextField
            type="number"
            inputProps={{ inputMode: "numeric", pattern: "[0-9]*" }}
            id="outlined-basic"
            label="Number Of row"
            variant="outlined"
            defaultValue={Rows}
            onChange={(e) => {
              setRows(e.target.value);
            }}
          />
          <Button
            variant="contained"
            onClick={() => {
              getRowData();
            }}
          >
            Get Data
          </Button>
        </Stack>
        <Box sx={{ height: 800, width: "100%" }}>
          <DataGrid
            rows={tbldata}
            columns={columns}
            pageSize={50}
            rowsPerPageOptions={[5, 10, 20]}
            pagination
            checkboxSelection
            disableSelectionOnClick
            components={{
              Toolbar: CustomToolbar,
            }}
          />
        </Box>
      </main>
    </div>
  );
}
